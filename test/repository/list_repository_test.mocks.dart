// Mocks generated by Mockito 5.2.0 from annotations
// in historical_restaurants/test/repository/list_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i6;

import 'package:historical_restaurants/database/app_database.dart' as _i2;
import 'package:historical_restaurants/database/restaurant.dart' as _i4;
import 'package:historical_restaurants/preference_wrapper.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [ApplicationDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplicationDatabase extends _i1.Mock
    implements _i2.ApplicationDatabase {
  MockApplicationDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> insertRestaurants(List<_i4.Restaurant>? restaurants) =>
      (super.noSuchMethod(Invocation.method(#insertRestaurants, [restaurants]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<_i4.Restaurant>> getRestaurants(Set<String>? cityFilters,
          _i5.SortOptions? option, String? searchTerm) =>
      (super.noSuchMethod(
          Invocation.method(#getRestaurants, [cityFilters, option, searchTerm]),
          returnValue:
              Future<List<_i4.Restaurant>>.value(<_i4.Restaurant>[])) as _i3
          .Future<List<_i4.Restaurant>>);
  @override
  _i3.Future<List<String>> getCities() =>
      (super.noSuchMethod(Invocation.method(#getCities, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i3.Future<List<String>>);
}

/// A class which mocks [PreferenceWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceWrapper extends _i1.Mock implements _i5.PreferenceWrapper {
  MockPreferenceWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void setSortSelection(_i5.SortOptions? option) =>
      super.noSuchMethod(Invocation.method(#setSortSelection, [option]),
          returnValueForMissingStub: null);
  @override
  _i5.SortOptions getSortSelection() => (super.noSuchMethod(
      Invocation.method(#getSortSelection, []),
      returnValue: _i5.SortOptions.alphabeticallyAscending) as _i5.SortOptions);
  @override
  void addCityFilter(String? city) =>
      super.noSuchMethod(Invocation.method(#addCityFilter, [city]),
          returnValueForMissingStub: null);
  @override
  void removeCityFilter(String? city) =>
      super.noSuchMethod(Invocation.method(#removeCityFilter, [city]),
          returnValueForMissingStub: null);
  @override
  Set<String> getCityFilters() =>
      (super.noSuchMethod(Invocation.method(#getCityFilters, []),
          returnValue: <String>{}) as Set<String>);
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
