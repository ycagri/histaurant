// Mocks generated by Mockito 5.3.0 from annotations
// in historical_restaurants/test/bloc/map_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:geolocator/geolocator.dart' as _i2;
import 'package:historical_restaurants/api/rest_api.dart' as _i7;
import 'package:historical_restaurants/database/app_database.dart' as _i3;
import 'package:historical_restaurants/database/restaurant.dart' as _i5;
import 'package:historical_restaurants/utils/LocationHelper.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePosition_0 extends _i1.SmartFake implements _i2.Position {
  _FakePosition_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [ApplicationDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplicationDatabase extends _i1.Mock
    implements _i3.ApplicationDatabase {
  @override
  _i4.Future<void> insertRestaurants(List<_i5.Restaurant>? restaurants) =>
      (super.noSuchMethod(Invocation.method(#insertRestaurants, [restaurants]),
              returnValue: _i4.Future<void>.value(),
              returnValueForMissingStub: _i4.Future<void>.value())
          as _i4.Future<void>);
  @override
  _i4.Future<List<_i5.Restaurant>> getRestaurants() => (super.noSuchMethod(
      Invocation.method(#getRestaurants, []),
      returnValue: _i4.Future<List<_i5.Restaurant>>.value(<_i5.Restaurant>[]),
      returnValueForMissingStub:
          _i4.Future<List<_i5.Restaurant>>.value(<_i5.Restaurant>[])) as _i4
      .Future<List<_i5.Restaurant>>);
  @override
  _i4.Future<List<String>> getCities() => (super.noSuchMethod(
          Invocation.method(#getCities, []),
          returnValue: _i4.Future<List<String>>.value(<String>[]),
          returnValueForMissingStub: _i4.Future<List<String>>.value(<String>[]))
      as _i4.Future<List<String>>);
}

/// A class which mocks [LocationHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationHelper extends _i1.Mock implements _i6.LocationHelper {
  @override
  _i4.Future<_i2.Position> getUserLocation() => (super.noSuchMethod(
          Invocation.method(#getUserLocation, []),
          returnValue: _i4.Future<_i2.Position>.value(
              _FakePosition_0(this, Invocation.method(#getUserLocation, []))),
          returnValueForMissingStub: _i4.Future<_i2.Position>.value(
              _FakePosition_0(this, Invocation.method(#getUserLocation, []))))
      as _i4.Future<_i2.Position>);
}

/// A class which mocks [RestApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestApi extends _i1.Mock implements _i7.RestApi {
  @override
  _i4.Future<List<_i5.Restaurant>> getRestaurants() => (super.noSuchMethod(
      Invocation.method(#getRestaurants, []),
      returnValue: _i4.Future<List<_i5.Restaurant>>.value(<_i5.Restaurant>[]),
      returnValueForMissingStub:
          _i4.Future<List<_i5.Restaurant>>.value(<_i5.Restaurant>[])) as _i4
      .Future<List<_i5.Restaurant>>);
}
