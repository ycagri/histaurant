// Mocks generated by Mockito 5.2.0 from annotations
// in historical_restaurants/test/bloc/map_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:typed_data' as _i8;

import 'package:geolocator/geolocator.dart' as _i2;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i7;
import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart'
    as _i3;
import 'package:historical_restaurants/database/restaurant.dart' as _i6;
import 'package:historical_restaurants/repository/map_repository.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePosition_0 extends _i1.Fake implements _i2.Position {}

class _FakeLatLngBounds_1 extends _i1.Fake implements _i3.LatLngBounds {}

class _FakeScreenCoordinate_2 extends _i1.Fake implements _i3.ScreenCoordinate {
}

class _FakeLatLng_3 extends _i1.Fake implements _i3.LatLng {}

/// A class which mocks [MapRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapRepository extends _i1.Mock implements _i4.MapRepository {
  @override
  _i5.Future<_i2.Position> getUserLocation() =>
      (super.noSuchMethod(Invocation.method(#getUserLocation, []),
              returnValue: Future<_i2.Position>.value(_FakePosition_0()))
          as _i5.Future<_i2.Position>);
  @override
  _i5.Future<List<_i6.Restaurant>> getRestaurants() => (super.noSuchMethod(
          Invocation.method(#getRestaurants, []),
          returnValue: Future<List<_i6.Restaurant>>.value(<_i6.Restaurant>[]))
      as _i5.Future<List<_i6.Restaurant>>);
  @override
  _i5.Future<List<_i6.Restaurant>> getRestaurantsFromLocal() =>
      (super.noSuchMethod(Invocation.method(#getRestaurantsFromLocal, []),
              returnValue:
                  Future<List<_i6.Restaurant>>.value(<_i6.Restaurant>[]))
          as _i5.Future<List<_i6.Restaurant>>);
  @override
  void registerSettingsChangeListener(dynamic Function()? listener) =>
      super.noSuchMethod(
          Invocation.method(#registerSettingsChangeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void unregisterSettingsChangeListener(dynamic Function()? listener) =>
      super.noSuchMethod(
          Invocation.method(#unregisterSettingsChangeListener, [listener]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GoogleMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleMapController extends _i1.Mock
    implements _i7.GoogleMapController {
  @override
  int get mapId =>
      (super.noSuchMethod(Invocation.getter(#mapId), returnValue: 0) as int);
  @override
  _i5.Future<void> clearTileCache(_i3.TileOverlayId? tileOverlayId) =>
      (super.noSuchMethod(Invocation.method(#clearTileCache, [tileOverlayId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> animateCamera(_i3.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#animateCamera, [cameraUpdate]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> moveCamera(_i3.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#moveCamera, [cameraUpdate]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> setMapStyle(String? mapStyle) =>
      (super.noSuchMethod(Invocation.method(#setMapStyle, [mapStyle]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.LatLngBounds> getVisibleRegion() => (super.noSuchMethod(
          Invocation.method(#getVisibleRegion, []),
          returnValue: Future<_i3.LatLngBounds>.value(_FakeLatLngBounds_1()))
      as _i5.Future<_i3.LatLngBounds>);
  @override
  _i5.Future<_i3.ScreenCoordinate> getScreenCoordinate(_i3.LatLng? latLng) =>
      (super.noSuchMethod(Invocation.method(#getScreenCoordinate, [latLng]),
              returnValue:
                  Future<_i3.ScreenCoordinate>.value(_FakeScreenCoordinate_2()))
          as _i5.Future<_i3.ScreenCoordinate>);
  @override
  _i5.Future<_i3.LatLng> getLatLng(_i3.ScreenCoordinate? screenCoordinate) =>
      (super.noSuchMethod(Invocation.method(#getLatLng, [screenCoordinate]),
              returnValue: Future<_i3.LatLng>.value(_FakeLatLng_3()))
          as _i5.Future<_i3.LatLng>);
  @override
  _i5.Future<void> showMarkerInfoWindow(_i3.MarkerId? markerId) =>
      (super.noSuchMethod(Invocation.method(#showMarkerInfoWindow, [markerId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> hideMarkerInfoWindow(_i3.MarkerId? markerId) =>
      (super.noSuchMethod(Invocation.method(#hideMarkerInfoWindow, [markerId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<bool> isMarkerInfoWindowShown(_i3.MarkerId? markerId) => (super
      .noSuchMethod(Invocation.method(#isMarkerInfoWindowShown, [markerId]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<double> getZoomLevel() =>
      (super.noSuchMethod(Invocation.method(#getZoomLevel, []),
          returnValue: Future<double>.value(0.0)) as _i5.Future<double>);
  @override
  _i5.Future<_i8.Uint8List?> takeSnapshot() =>
      (super.noSuchMethod(Invocation.method(#takeSnapshot, []),
              returnValue: Future<_i8.Uint8List?>.value())
          as _i5.Future<_i8.Uint8List?>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}
