// Mocks generated by Mockito 5.3.0 from annotations
// in historical_restaurants/test/bloc/map_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i8;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:geolocator/geolocator.dart' as _i2;
import 'package:historical_restaurants/api/rest_api.dart' as _i10;
import 'package:historical_restaurants/database/app_database.dart' as _i4;
import 'package:historical_restaurants/database/restaurant.dart' as _i6;
import 'package:historical_restaurants/preference_wrapper.dart' as _i7;
import 'package:historical_restaurants/utils/LocationHelper.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePosition_0 extends _i1.SmartFake implements _i2.Position {
  _FakePosition_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSnapshotMetadata_1 extends _i1.SmartFake
    implements _i3.SnapshotMetadata {
  _FakeSnapshotMetadata_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [ApplicationDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplicationDatabase extends _i1.Mock
    implements _i4.ApplicationDatabase {
  @override
  _i5.Future<void> insertRestaurants(List<_i6.Restaurant>? restaurants) =>
      (super.noSuchMethod(Invocation.method(#insertRestaurants, [restaurants]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<List<_i6.Restaurant>> getRestaurants(
          Set<String>? cityFilters, _i7.SortOptions? option) =>
      (super.noSuchMethod(
              Invocation.method(#getRestaurants, [cityFilters, option]),
              returnValue:
                  _i5.Future<List<_i6.Restaurant>>.value(<_i6.Restaurant>[]))
          as _i5.Future<List<_i6.Restaurant>>);
  @override
  _i5.Future<List<String>> getCities() =>
      (super.noSuchMethod(Invocation.method(#getCities, []),
              returnValue: _i5.Future<List<String>>.value(<String>[]))
          as _i5.Future<List<String>>);
}

/// A class which mocks [PreferenceWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceWrapper extends _i1.Mock implements _i7.PreferenceWrapper {
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void setSortSelection(_i7.SortOptions? option) =>
      super.noSuchMethod(Invocation.method(#setSortSelection, [option]),
          returnValueForMissingStub: null);
  @override
  _i7.SortOptions getSortSelection() => (super.noSuchMethod(
      Invocation.method(#getSortSelection, []),
      returnValue: _i7.SortOptions.alphabeticallyAscending) as _i7.SortOptions);
  @override
  void addCityFilter(String? city) =>
      super.noSuchMethod(Invocation.method(#addCityFilter, [city]),
          returnValueForMissingStub: null);
  @override
  void removeCityFilter(String? city) =>
      super.noSuchMethod(Invocation.method(#removeCityFilter, [city]),
          returnValueForMissingStub: null);
  @override
  Set<String> getCityFilters() =>
      (super.noSuchMethod(Invocation.method(#getCityFilters, []),
          returnValue: <String>{}) as Set<String>);
  @override
  void addListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [LocationHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationHelper extends _i1.Mock implements _i9.LocationHelper {
  @override
  _i5.Future<_i2.Position> getUserLocation() => (super.noSuchMethod(
          Invocation.method(#getUserLocation, []),
          returnValue: _i5.Future<_i2.Position>.value(
              _FakePosition_0(this, Invocation.method(#getUserLocation, []))))
      as _i5.Future<_i2.Position>);
}

/// A class which mocks [RestApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestApi extends _i1.Mock implements _i10.RestApi {
  @override
  _i5.Future<List<_i6.Restaurant>> getRestaurants() =>
      (super.noSuchMethod(Invocation.method(#getRestaurants, []),
              returnValue:
                  _i5.Future<List<_i6.Restaurant>>.value(<_i6.Restaurant>[]))
          as _i5.Future<List<_i6.Restaurant>>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i3.QuerySnapshot<T> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.QueryDocumentSnapshot<T>> get docs =>
      (super.noSuchMethod(Invocation.getter(#docs),
              returnValue: <_i3.QueryDocumentSnapshot<T>>[])
          as List<_i3.QueryDocumentSnapshot<T>>);
  @override
  List<_i3.DocumentChange<T>> get docChanges => (super.noSuchMethod(
      Invocation.getter(#docChanges),
      returnValue: <_i3.DocumentChange<T>>[]) as List<_i3.DocumentChange<T>>);
  @override
  _i3.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
              returnValue:
                  _FakeSnapshotMetadata_1(this, Invocation.getter(#metadata)))
          as _i3.SnapshotMetadata);
  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
}
