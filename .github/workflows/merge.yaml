name: Develop Upload

on:
  push:
    branches: [ develop ]

jobs:
  deploy:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - uses: subosito/flutter-action@v2
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.9
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - run: npm install
    - name: Install dependencies
      run: npx ci
    - name: Install semantic-release extra plugins
      uses: cycjimmy/semantic-release-action@v2
      id: semantic
      with:
        semantic_version: 19.0.2
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/git
          @semantic-release/exec
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Build Android Release
      if: steps.semantic.outputs.new_release_published == 'true'
      run: flutter build appbundle
      env: 
        STORE_PASSWORD: ${{ secrets.PLAY_STORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.PLAY_STORE_ALIAS }}
    - name: Install Publish Requirements
      if: steps.semantic.outputs.new_release_published == 'true'
      run: pip3 install -r publish/requirements.txt
    - name: Publish to Google Play Internal Channel
      if: steps.semantic.outputs.new_release_published == 'true'
      run: python3 publish/publish_bundle_to_store.py com.ycagri.historical_restaurants build/app/outputs/bundle/release/*.aab internal publish/key.p12
    - name: Install the provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_P12_BASE64 }}
        P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - name: Build IOS Release
      if: steps.semantic.outputs.new_release_published == 'true'
      run: flutter build ipa --export-options-plist=ios/ExportOptions.plist
    - name: Publish to Apple Store Connect
      if: steps.semantic.outputs.new_release_published == 'true'
      run: xcrun altool --upload-app --type ios -f build/ios/ipa/*.ipa --apiKey ${{ secrets.APP_STORE_CONNECT_API_KEY }} --apiIssuer ${{ secrets.APP_STORE_CONNECT_API_ISSUER }}
    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision